# Generated by Django 5.0.8 on 2024-08-17 13:14

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.db.migrations.operations.special
import django.db.models.deletion
import lib.prefetch_snooping
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [('demoscene', '0001_initial'), ('demoscene', '0002_permissions'), ('demoscene', '0003_increase_link_length'), ('demoscene', '0004_blacklistedtag'), ('demoscene', '0005_accountprofile_user_onetoonefield'), ('demoscene', '0006_add_releaser_search_index'), ('demoscene', '0007_nickvariant_search_title'), ('demoscene', '0008_add_releaser_admin_search_index'), ('demoscene', '0009_search_document_noneditable'), ('demoscene', '0010_releaserexternallink_source'), ('demoscene', '0011_releaser_locked'), ('demoscene', '0012_remove_admin_search'), ('demoscene', '0013_clear_private_real_names'), ('demoscene', '0014_remove_show_name_flags'), ('demoscene', '0015_change_real_name_permission'), ('demoscene', '0016_py3_strings'), ('demoscene', '0017_membership_group_limit_choices'), ('demoscene', '0018_remove_releaser_woe_id'), ('demoscene', '0019_releaser_hide_from_search_engines'), ('demoscene', '0020_decode_asciiarena_params'), ('demoscene', '0021_edit_index_together')]

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('taggit', '0002_auto_20150616_2121'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('demozoo0_id', models.IntegerField(blank=True, null=True, verbose_name=b'Demozoo v0 ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, unique=True)),
            ],
            options={
                'ordering': ['user__username'],
            },
        ),
        migrations.CreateModel(
            name='CaptchaQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(help_text=b'HTML is allowed. Keep questions factual and simple - remember that our potential users are not always followers of mainstream demoparty culture')),
                ('answer', models.CharField(help_text=b'Answers are not case sensitive (the correct answer will be accepted regardless of capitalisation)', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Nick',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('abbreviation', models.CharField(blank=True, help_text=b"(optional - only if there's one that's actively being used. Don't just make one up!)", max_length=255)),
                ('differentiator', models.CharField(blank=True, help_text=b'hint text to distinguish from other groups/sceners with the same name - e.g. platform or country', max_length=32)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NickVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nick', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='demoscene.nick')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Releaser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('is_group', models.BooleanField(db_index=True)),
                ('notes', models.TextField(blank=True)),
                ('demozoo0_id', models.IntegerField(blank=True, null=True, verbose_name=b'Demozoo v0 ID')),
                ('location', models.CharField(blank=True, max_length=255)),
                ('country_code', models.CharField(blank=True, max_length=5)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('woe_id', models.BigIntegerField(blank=True, null=True)),
                ('geonames_id', models.BigIntegerField(blank=True, null=True)),
                ('first_name', models.CharField(blank=True, max_length=255)),
                ('show_first_name', models.BooleanField(default=True)),
                ('surname', models.CharField(blank=True, max_length=255)),
                ('show_surname', models.BooleanField(default=True)),
                ('real_name_note', models.TextField(blank=True, default=b'', help_text=b'Details of any correspondence / decision about whether this name should be public', verbose_name=b'Permission note')),
                ('data_source', models.CharField(blank=True, max_length=32, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'ordering': ['name'],
                'permissions': (('view_releaser_real_names', 'Can view non-public real names'),),
            },
            bases=(models.Model, lib.prefetch_snooping.ModelWithPrefetchSnooping),
        ),
        migrations.CreateModel(
            name='SceneID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sceneid', models.IntegerField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TagDescription',
            fields=[
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='description', serialize=False, to='taggit.tag')),
                ('description', models.TextField(help_text=b"HTML is allowed. Keep this to a couple of sentences at most - it's used in tooltips as well as the tag listing page")),
            ],
        ),
        migrations.AddField(
            model_name='nick',
            name='releaser',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nicks', to='demoscene.releaser'),
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_current', models.BooleanField(default=True)),
                ('data_source', models.CharField(blank=True, max_length=32, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_memberships', to='demoscene.releaser')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to='demoscene.releaser')),
            ],
        ),
        migrations.CreateModel(
            name='ReleaserExternalLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link_class', models.CharField(max_length=100)),
                ('parameter', models.CharField(max_length=255)),
                ('releaser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='external_links', to='demoscene.releaser')),
            ],
            options={
                'ordering': ['link_class'],
                'unique_together': {('link_class', 'parameter', 'releaser')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='nick',
            unique_together={('releaser', 'name')},
        ),
        migrations.CreateModel(
            name='Edit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(max_length=100)),
                ('focus_object_id', models.PositiveIntegerField()),
                ('focus2_object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('description', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('admin_only', models.BooleanField(default=False)),
                ('focus2_content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='edits_as_focus2', to='contenttypes.contenttype')),
                ('focus_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edits', to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [
                    models.Index(fields=['focus_content_type', 'focus_object_id'], name='demoscene_e_focus_c_210c7b_idx'),
                    models.Index(fields=['focus2_content_type', 'focus2_object_id'], name='demoscene_e_focus2__bb354d_idx'),
                ],
            },
        ),
        migrations.AlterField(
            model_name='releaserexternallink',
            name='parameter',
            field=models.CharField(max_length=4096),
        ),
        migrations.CreateModel(
            name='BlacklistedTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(help_text=b'The tag to be blacklisted', max_length=255)),
                ('replacement', models.CharField(blank=True, help_text=b'What to replace the tag with (leave blank to delete it completely)', max_length=255)),
                ('message', models.TextField(blank=True, help_text=b'Message to show to the user when they try to use the tag (optional)')),
            ],
        ),
        migrations.AlterField(
            model_name='accountprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='releaser',
            name='search_document',
            field=django.contrib.postgres.search.SearchVectorField(null=True),
        ),
        migrations.AddIndex(
            model_name='releaser',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_document'], name='demoscene_r_search__ff7f7c_gin'),
        ),
        migrations.AddField(
            model_name='nickvariant',
            name='search_title',
            field=models.CharField(blank=True, db_index=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='releaser',
            name='admin_search_document',
            field=django.contrib.postgres.search.SearchVectorField(null=True),
        ),
        migrations.AddIndex(
            model_name='releaser',
            index=django.contrib.postgres.indexes.GinIndex(fields=['admin_search_document'], name='demoscene_r_admin_s_a0c2dc_gin'),
        ),
        migrations.AlterField(
            model_name='releaser',
            name='admin_search_document',
            field=django.contrib.postgres.search.SearchVectorField(editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='releaser',
            name='search_document',
            field=django.contrib.postgres.search.SearchVectorField(editable=False, null=True),
        ),
        migrations.AddField(
            model_name='releaserexternallink',
            name='source',
            field=models.CharField(blank=True, editable=False, help_text=b'Identifier to indicate where this link came from - e.g. manual (entered via form), match, auto', max_length=32),
        ),
        migrations.AddField(
            model_name='releaser',
            name='locked',
            field=models.BooleanField(default=False, editable=False),
        ),
        migrations.RemoveIndex(
            model_name='releaser',
            name='demoscene_r_admin_s_a0c2dc_gin',
        ),
        migrations.RemoveField(
            model_name='releaser',
            name='admin_search_document',
        ),
        migrations.RemoveField(
            model_name='releaser',
            name='show_first_name',
        ),
        migrations.RemoveField(
            model_name='releaser',
            name='show_surname',
        ),
        migrations.AlterModelOptions(
            name='releaser',
            options={'ordering': ['name'], 'permissions': (('change_releaser_real_names', 'Can change non-public real names'),)},
        ),
        migrations.AlterField(
            model_name='accountprofile',
            name='demozoo0_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='Demozoo v0 ID'),
        ),
        migrations.AlterField(
            model_name='blacklistedtag',
            name='message',
            field=models.TextField(blank=True, help_text='Message to show to the user when they try to use the tag (optional)'),
        ),
        migrations.AlterField(
            model_name='blacklistedtag',
            name='replacement',
            field=models.CharField(blank=True, help_text='What to replace the tag with (leave blank to delete it completely)', max_length=255),
        ),
        migrations.AlterField(
            model_name='blacklistedtag',
            name='tag',
            field=models.CharField(help_text='The tag to be blacklisted', max_length=255),
        ),
        migrations.AlterField(
            model_name='captchaquestion',
            name='answer',
            field=models.CharField(help_text='Answers are not case sensitive (the correct answer will be accepted regardless of capitalisation)', max_length=255),
        ),
        migrations.AlterField(
            model_name='captchaquestion',
            name='question',
            field=models.TextField(help_text='HTML is allowed. Keep questions factual and simple - remember that our potential users are not always followers of mainstream demoparty culture'),
        ),
        migrations.AlterField(
            model_name='nick',
            name='abbreviation',
            field=models.CharField(blank=True, help_text="(optional - only if there's one that's actively being used. Don't just make one up!)", max_length=255),
        ),
        migrations.AlterField(
            model_name='nick',
            name='differentiator',
            field=models.CharField(blank=True, help_text='hint text to distinguish from other groups/sceners with the same name - e.g. platform or country', max_length=32),
        ),
        migrations.AlterField(
            model_name='releaser',
            name='demozoo0_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='Demozoo v0 ID'),
        ),
        migrations.AlterField(
            model_name='releaser',
            name='real_name_note',
            field=models.TextField(blank=True, default='', help_text='Details of any correspondence / decision about whether this name should be public', verbose_name='Permission note'),
        ),
        migrations.AlterField(
            model_name='releaserexternallink',
            name='source',
            field=models.CharField(blank=True, editable=False, help_text='Identifier to indicate where this link came from - e.g. manual (entered via form), match, auto', max_length=32),
        ),
        migrations.AlterField(
            model_name='tagdescription',
            name='description',
            field=models.TextField(help_text="HTML is allowed. Keep this to a couple of sentences at most - it's used in tooltips as well as the tag listing page"),
        ),
        migrations.AlterField(
            model_name='membership',
            name='group',
            field=models.ForeignKey(limit_choices_to={'is_group': True}, on_delete=django.db.models.deletion.CASCADE, related_name='member_memberships', to='demoscene.releaser'),
        ),
        migrations.RemoveField(
            model_name='releaser',
            name='woe_id',
        ),
        migrations.AddField(
            model_name='releaser',
            name='hide_from_search_engines',
            field=models.BooleanField(default=False),
        ),
    ]
