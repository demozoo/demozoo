# Generated by Django 1.9.7 on 2017-02-20 19:50
import django.db.models.deletion
import taggit.managers
from django.db import migrations, models

import lib.prefetch_snooping


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('platforms', '0001_initial'),
        ('demoscene', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ansi',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Credit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(blank=True, choices=[(b'Code', b'Code'), (b'Graphics', b'Graphics'), (b'Music', b'Music'), (b'Text', b'Text'), (b'Other', b'Other')], max_length=20)),
                ('role', models.CharField(blank=True, max_length=255)),
                ('nick', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credits', to='demoscene.Nick')),
            ],
            options={
                'ordering': ['production__title'],
            },
        ),
        migrations.CreateModel(
            name='PackMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField()),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Production',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('supertype', models.CharField(choices=[(b'production', 'Production'), (b'graphics', 'Graphics'), (b'music', 'Music')], db_index=True, max_length=32)),
                ('notes', models.TextField(blank=True)),
                ('release_date_date', models.DateField(blank=True, null=True)),
                ('release_date_precision', models.CharField(blank=True, choices=[(b'd', b'Day'), (b'm', b'Month'), (b'y', b'Year')], max_length=1)),
                ('demozoo0_id', models.IntegerField(blank=True, null=True, verbose_name=b'Demozoo v0 ID')),
                ('scene_org_id', models.IntegerField(blank=True, null=True, verbose_name=b'scene.org ID')),
                ('data_source', models.CharField(blank=True, max_length=32, null=True)),
                ('unparsed_byline', models.CharField(blank=True, max_length=255, null=True)),
                ('has_bonafide_edits', models.BooleanField(default=True, help_text=b'True if this production has been updated through its own forms, as opposed to just compo results tables')),
                ('include_notes_in_search', models.BooleanField(default=True, help_text=b"Whether the notes field for this production will be indexed. (Untick this to avoid false matches in search results e.g. 'this demo was not by Magic / Nah-Kolor')")),
                ('sortable_title', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField()),
                ('author_affiliation_nicks', models.ManyToManyField(blank=True, null=True, related_name='member_productions', to='demoscene.Nick')),
                ('author_nicks', models.ManyToManyField(blank=True, related_name='productions', to='demoscene.Nick')),
            ],
            options={
                'ordering': ['sortable_title'],
            },
            bases=(lib.prefetch_snooping.ModelWithPrefetchSnooping, models.Model),
        ),
        migrations.CreateModel(
            name='ProductionBlurb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(help_text=b'A tweet-sized description of this demo, to promote it on listing pages')),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blurbs', to='productions.Production')),
            ],
        ),
        migrations.CreateModel(
            name='ProductionDemozoo0Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(max_length=64)),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demozoo0_platforms', to='productions.Production')),
            ],
        ),
        migrations.CreateModel(
            name='ProductionLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link_class', models.CharField(max_length=100)),
                ('parameter', models.CharField(max_length=255)),
                ('is_download_link', models.BooleanField()),
                ('description', models.CharField(blank=True, max_length=255)),
                ('demozoo0_id', models.IntegerField(blank=True, null=True, verbose_name=b'Demozoo v0 ID')),
                ('file_for_screenshot', models.CharField(blank=True, help_text=b'The file within this archive which has been identified as most suitable for generating a screenshot from', max_length=255)),
                ('is_unresolved_for_screenshotting', models.BooleanField(default=False, help_text=b"Indicates that we've tried and failed to identify the most suitable file in this archive to generate a screenshot from")),
                ('has_bad_image', models.BooleanField(default=False, help_text=b'Indicates that an attempt to create a screenshot from this link has failed at the image processing stage')),
                ('thumbnail_url', models.CharField(blank=True, editable=False, max_length=255)),
                ('thumbnail_width', models.IntegerField(blank=True, editable=False, null=True)),
                ('thumbnail_height', models.IntegerField(blank=True, editable=False, null=True)),
                ('video_width', models.IntegerField(blank=True, editable=False, null=True)),
                ('video_height', models.IntegerField(blank=True, editable=False, null=True)),
                ('embed_data_last_fetch_time', models.DateTimeField(blank=True, editable=False, null=True)),
                ('embed_data_last_error_time', models.DateTimeField(blank=True, editable=False, null=True)),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='productions.Production')),
            ],
            options={
                'ordering': ['link_class'],
            },
        ),
        migrations.CreateModel(
            name='ProductionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(max_length=255)),
                ('position', models.IntegerField(default=0, help_text=b'Position in which this should be ordered underneath its parent type (if not alphabetical)')),
                ('internal_name', models.CharField(blank=True, help_text=b'Used to identify this prod type for special treatment in code - leave this alone!', max_length=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Screenshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_url', models.CharField(blank=True, max_length=255)),
                ('original_width', models.IntegerField(blank=True, editable=False, null=True)),
                ('original_height', models.IntegerField(blank=True, editable=False, null=True)),
                ('thumbnail_url', models.CharField(blank=True, max_length=255)),
                ('thumbnail_width', models.IntegerField(blank=True, editable=False, null=True)),
                ('thumbnail_height', models.IntegerField(blank=True, editable=False, null=True)),
                ('standard_url', models.CharField(blank=True, max_length=255)),
                ('standard_width', models.IntegerField(blank=True, editable=False, null=True)),
                ('standard_height', models.IntegerField(blank=True, editable=False, null=True)),
                ('source_download_id', models.IntegerField(blank=True, editable=False, null=True)),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screenshots', to='productions.Production')),
            ],
        ),
        migrations.CreateModel(
            name='SoundtrackLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField()),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soundtrack_links', to='productions.Production')),
                ('soundtrack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appearances_as_soundtrack', to='productions.Production')),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.AddField(
            model_name='production',
            name='default_screenshot',
            field=models.ForeignKey(blank=True, editable=False, help_text=b'Screenshot to use alongside this production in listings - randomly assigned by script', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='productions.Screenshot'),
        ),
        migrations.AddField(
            model_name='production',
            name='platforms',
            field=models.ManyToManyField(blank=True, related_name='productions', to='platforms.Platform'),
        ),
        migrations.AddField(
            model_name='production',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='production',
            name='types',
            field=models.ManyToManyField(related_name='productions', to='productions.ProductionType'),
        ),
        migrations.AddField(
            model_name='packmember',
            name='member',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='packed_in', to='productions.Production'),
        ),
        migrations.AddField(
            model_name='packmember',
            name='pack',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pack_members', to='productions.Production'),
        ),
        migrations.AddField(
            model_name='credit',
            name='production',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credits', to='productions.Production'),
        ),
        migrations.AddField(
            model_name='ansi',
            name='production',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ansis', to='productions.Production'),
        ),
        migrations.AlterUniqueTogether(
            name='productionlink',
            unique_together=set([('link_class', 'parameter', 'production', 'is_download_link')]),
        ),
        migrations.AlterIndexTogether(
            name='productionlink',
            index_together=set([('link_class', 'parameter')]),
        ),
        migrations.AlterIndexTogether(
            name='production',
            index_together=set([('release_date_date', 'created_at')]),
        ),
    ]
