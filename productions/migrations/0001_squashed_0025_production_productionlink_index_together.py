# Generated by Django 5.0.8 on 2024-08-17 13:22

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.db.models.deletion
import common.models.prefetch_snooping
import taggit.managers
from django.db import migrations, models


def create_productiontypes(apps, schema):
    ProductionType = apps.get_model('productions', 'productiontype')
    if ProductionType.objects.exists():
        return

    productiontypes = [
    {
        "path": "0006",
        "depth": 1,
        "numchild": 0,
        "name": "Demo",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000A000R",
        "depth": 2,
        "numchild": 0,
        "name": "64K Intro",
        "position": 100,
        "internal_name": ""
    },
    {
        "path": "000A000L",
        "depth": 2,
        "numchild": 0,
        "name": "4K Intro",
        "position": 70,
        "internal_name": ""
    },
    {
        "path": "000A",
        "depth": 1,
        "numchild": 16,
        "name": "Intro",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000D0001",
        "depth": 2,
        "numchild": 0,
        "name": "Diskmag",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000K",
        "depth": 1,
        "numchild": 0,
        "name": "Tool",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000F",
        "depth": 1,
        "numchild": 1,
        "name": "Musicdisk",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000J",
        "depth": 1,
        "numchild": 0,
        "name": "Slideshow",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000G",
        "depth": 1,
        "numchild": 1,
        "name": "Pack",
        "position": 0,
        "internal_name": "pack"
    },
    {
        "path": "000A000Q",
        "depth": 2,
        "numchild": 0,
        "name": "40k Intro",
        "position": 90,
        "internal_name": ""
    },
    {
        "path": "000B",
        "depth": 1,
        "numchild": 0,
        "name": "Invitation",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000F0001",
        "depth": 2,
        "numchild": 0,
        "name": "Chip Music Pack",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000A0006",
        "depth": 2,
        "numchild": 0,
        "name": "Cracktro",
        "position": 5,
        "internal_name": ""
    },
    {
        "path": "000E",
        "depth": 1,
        "numchild": 3,
        "name": "Music",
        "position": 0,
        "internal_name": "music"
    },
    {
        "path": "000A0007",
        "depth": 2,
        "numchild": 0,
        "name": "32b Intro",
        "position": 10,
        "internal_name": ""
    },
    {
        "path": "000A000A",
        "depth": 2,
        "numchild": 0,
        "name": "64b Intro",
        "position": 20,
        "internal_name": ""
    },
    {
        "path": "000A000C",
        "depth": 2,
        "numchild": 0,
        "name": "128b Intro",
        "position": 30,
        "internal_name": ""
    },
    {
        "path": "000A000E",
        "depth": 2,
        "numchild": 0,
        "name": "256b Intro",
        "position": 40,
        "internal_name": ""
    },
    {
        "path": "000A000G",
        "depth": 2,
        "numchild": 0,
        "name": "512b Intro",
        "position": 50,
        "internal_name": ""
    },
    {
        "path": "000A000I",
        "depth": 2,
        "numchild": 0,
        "name": "1K Intro",
        "position": 60,
        "internal_name": ""
    },
    {
        "path": "000A000P",
        "depth": 2,
        "numchild": 0,
        "name": "32K Intro",
        "position": 80,
        "internal_name": ""
    },
    {
        "path": "0009",
        "depth": 1,
        "numchild": 6,
        "name": "Graphics",
        "position": 0,
        "internal_name": "graphics"
    },
    {
        "path": "00090008",
        "depth": 2,
        "numchild": 0,
        "name": "ASCII",
        "position": 0,
        "internal_name": "ascii"
    },
    {
        "path": "00090009",
        "depth": 2,
        "numchild": 0,
        "name": "ASCII Collection",
        "position": 0,
        "internal_name": "ascii-collection"
    },
    {
        "path": "0009000E",
        "depth": 2,
        "numchild": 0,
        "name": "ANSI",
        "position": 10,
        "internal_name": "ansi"
    },
    {
        "path": "0009000F",
        "depth": 2,
        "numchild": 0,
        "name": "Artpack",
        "position": 20,
        "internal_name": "artpack"
    },
    {
        "path": "0009000G",
        "depth": 2,
        "numchild": 1,
        "name": "Procedural Graphics",
        "position": 30,
        "internal_name": "exe-graphics"
    },
    {
        "path": "0009000G0003",
        "depth": 3,
        "numchild": 0,
        "name": "4K Procedural Graphics",
        "position": 10,
        "internal_name": "4k-exe-graphics"
    },
    {
        "path": "000E0006",
        "depth": 2,
        "numchild": 0,
        "name": "Tracked Music",
        "position": 0,
        "internal_name": "tracked-music"
    },
    {
        "path": "000E0005",
        "depth": 2,
        "numchild": 0,
        "name": "Streaming Music",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000E0004",
        "depth": 2,
        "numchild": 2,
        "name": "Executable Music",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000E00040002",
        "depth": 3,
        "numchild": 0,
        "name": "32K Executable Music",
        "position": 50,
        "internal_name": ""
    },
    {
        "path": "0008",
        "depth": 1,
        "numchild": 0,
        "name": "Game",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000L",
        "depth": 1,
        "numchild": 0,
        "name": "Video",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000A000O",
        "depth": 2,
        "numchild": 0,
        "name": "16K Intro",
        "position": 75,
        "internal_name": ""
    },
    {
        "path": "0009000A",
        "depth": 2,
        "numchild": 0,
        "name": "Photo",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000A000K",
        "depth": 2,
        "numchild": 0,
        "name": "2K Intro",
        "position": 65,
        "internal_name": ""
    },
    {
        "path": "000E00040004",
        "depth": 3,
        "numchild": 0,
        "name": "64K Executable Music",
        "position": 60,
        "internal_name": ""
    },
    {
        "path": "000A000U",
        "depth": 2,
        "numchild": 0,
        "name": "100K Intro",
        "position": 110,
        "internal_name": ""
    },
    {
        "path": "000A0005",
        "depth": 2,
        "numchild": 0,
        "name": "BBStro",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000H",
        "depth": 1,
        "numchild": 0,
        "name": "Performance",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000A000M",
        "depth": 2,
        "numchild": 0,
        "name": "8K Intro",
        "position": 73,
        "internal_name": ""
    },
    {
        "path": "000I",
        "depth": 1,
        "numchild": 0,
        "name": "Report",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000M",
        "depth": 1,
        "numchild": 0,
        "name": "Votedisk",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000G0001",
        "depth": 2,
        "numchild": 0,
        "name": "Docsdisk",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000D",
        "depth": 1,
        "numchild": 3,
        "name": "Magazine",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000D0002",
        "depth": 2,
        "numchild": 0,
        "name": "Papermag",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000D0003",
        "depth": 2,
        "numchild": 0,
        "name": "Textmag",
        "position": 0,
        "internal_name": ""
    },
    {
        "path": "000A000T",
        "depth": 2,
        "numchild": 0,
        "name": "96K Intro",
        "position": 105,
        "internal_name": ""
    }]

    for pt in productiontypes:
        ProductionType.objects.create(**pt)


class Migration(migrations.Migration):

    replaces = [('productions', '0001_initial'), ('productions', '0002_default_productiontypes'), ('productions', '0003_increase_link_length'), ('productions', '0004_production_authoraffiliationlinks_remove_null'), ('productions', '0005_production_has_screenshot'), ('productions', '0006_remove_production_default_screenshot'), ('productions', '0007_add_production_search_index'), ('productions', '0008_production_search_title'), ('productions', '0009_search_document_noneditable'), ('productions', '0010_productionlink_source'), ('productions', '0011_infofile'), ('productions', '0012_infofile_default_storage'), ('productions', '0013_production_locked'), ('productions', '0014_credit_data_source'), ('productions', '0015_soundtrack_packmember_data_source'), ('productions', '0016_screenshot_janeway_data'), ('productions', '0017_remove_ansi'), ('productions', '0018_py3_strings'), ('productions', '0019_soundtrack_limit_choices'), ('productions', '0020_production_hide_from_search_engines'), ('productions', '0021_infofile_verbose_name'), ('productions', '0022_emulatorconfig'), ('productions', '0023_emulator_config_choices'), ('productions', '0024_alter_screenshot_thumbnail_url'), ('productions', '0025_production_productionlink_index_together')]

    initial = True

    dependencies = [
        ('demoscene', '0001_initial'),
        ('platforms', '0001_initial'),
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='Production',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('supertype', models.CharField(choices=[(b'production', 'Production'), (b'graphics', 'Graphics'), (b'music', 'Music')], db_index=True, max_length=32)),
                ('notes', models.TextField(blank=True)),
                ('release_date_date', models.DateField(blank=True, null=True)),
                ('release_date_precision', models.CharField(blank=True, choices=[(b'd', b'Day'), (b'm', b'Month'), (b'y', b'Year')], max_length=1)),
                ('demozoo0_id', models.IntegerField(blank=True, null=True, verbose_name=b'Demozoo v0 ID')),
                ('scene_org_id', models.IntegerField(blank=True, null=True, verbose_name=b'scene.org ID')),
                ('data_source', models.CharField(blank=True, max_length=32, null=True)),
                ('unparsed_byline', models.CharField(blank=True, max_length=255, null=True)),
                ('has_bonafide_edits', models.BooleanField(default=True, help_text=b'True if this production has been updated through its own forms, as opposed to just compo results tables')),
                ('include_notes_in_search', models.BooleanField(default=True, help_text=b"Whether the notes field for this production will be indexed. (Untick this to avoid false matches in search results e.g. 'this demo was not by Magic / Nah-Kolor')")),
                ('sortable_title', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField()),
                ('author_affiliation_nicks', models.ManyToManyField(blank=True, null=True, related_name='member_productions', to='demoscene.nick')),
                ('author_nicks', models.ManyToManyField(blank=True, related_name='productions', to='demoscene.nick')),
            ],
            options={
                'ordering': ['sortable_title'],
                'indexes': [
                    models.Index(fields=['release_date_date', 'created_at'], name='productions_release_fc8d66_idx'),
                ],
            },
            bases=(common.models.prefetch_snooping.PrefetchSnoopingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ProductionBlurb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(help_text=b'A tweet-sized description of this demo, to promote it on listing pages')),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blurbs', to='productions.production')),
            ],
        ),
        migrations.CreateModel(
            name='ProductionDemozoo0Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(max_length=64)),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demozoo0_platforms', to='productions.production')),
            ],
        ),
        migrations.CreateModel(
            name='ProductionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(max_length=255)),
                ('position', models.IntegerField(default=0, help_text=b'Position in which this should be ordered underneath its parent type (if not alphabetical)')),
                ('internal_name', models.CharField(blank=True, help_text=b'Used to identify this prod type for special treatment in code - leave this alone!', max_length=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Screenshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_url', models.CharField(blank=True, max_length=255)),
                ('original_width', models.IntegerField(blank=True, editable=False, null=True)),
                ('original_height', models.IntegerField(blank=True, editable=False, null=True)),
                ('thumbnail_url', models.CharField(blank=True, max_length=255)),
                ('thumbnail_width', models.IntegerField(blank=True, editable=False, null=True)),
                ('thumbnail_height', models.IntegerField(blank=True, editable=False, null=True)),
                ('standard_url', models.CharField(blank=True, max_length=255)),
                ('standard_width', models.IntegerField(blank=True, editable=False, null=True)),
                ('standard_height', models.IntegerField(blank=True, editable=False, null=True)),
                ('source_download_id', models.IntegerField(blank=True, editable=False, null=True)),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screenshots', to='productions.production')),
            ],
        ),
        migrations.CreateModel(
            name='SoundtrackLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField()),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soundtrack_links', to='productions.production')),
                ('soundtrack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appearances_as_soundtrack', to='productions.production')),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.AddField(
            model_name='production',
            name='default_screenshot',
            field=models.ForeignKey(blank=True, editable=False, help_text=b'Screenshot to use alongside this production in listings - randomly assigned by script', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='productions.screenshot'),
        ),
        migrations.AddField(
            model_name='production',
            name='platforms',
            field=models.ManyToManyField(blank=True, related_name='productions', to='platforms.platform'),
        ),
        migrations.AddField(
            model_name='production',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='production',
            name='types',
            field=models.ManyToManyField(related_name='productions', to='productions.productiontype'),
        ),
        migrations.CreateModel(
            name='PackMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField()),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='packed_in', to='productions.production')),
                ('pack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pack_members', to='productions.production')),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Credit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(blank=True, choices=[(b'Code', b'Code'), (b'Graphics', b'Graphics'), (b'Music', b'Music'), (b'Text', b'Text'), (b'Other', b'Other')], max_length=20)),
                ('role', models.CharField(blank=True, max_length=255)),
                ('nick', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credits', to='demoscene.nick')),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credits', to='productions.production')),
            ],
            options={
                'ordering': ['production__title'],
            },
        ),
        migrations.CreateModel(
            name='Ansi',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=255)),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ansis', to='productions.production')),
            ],
        ),
        migrations.CreateModel(
            name='ProductionLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link_class', models.CharField(max_length=100)),
                ('parameter', models.CharField(max_length=255)),
                ('is_download_link', models.BooleanField()),
                ('description', models.CharField(blank=True, max_length=255)),
                ('demozoo0_id', models.IntegerField(blank=True, null=True, verbose_name=b'Demozoo v0 ID')),
                ('file_for_screenshot', models.CharField(blank=True, help_text=b'The file within this archive which has been identified as most suitable for generating a screenshot from', max_length=255)),
                ('is_unresolved_for_screenshotting', models.BooleanField(default=False, help_text=b"Indicates that we've tried and failed to identify the most suitable file in this archive to generate a screenshot from")),
                ('has_bad_image', models.BooleanField(default=False, help_text=b'Indicates that an attempt to create a screenshot from this link has failed at the image processing stage')),
                ('thumbnail_url', models.CharField(blank=True, editable=False, max_length=255)),
                ('thumbnail_width', models.IntegerField(blank=True, editable=False, null=True)),
                ('thumbnail_height', models.IntegerField(blank=True, editable=False, null=True)),
                ('video_width', models.IntegerField(blank=True, editable=False, null=True)),
                ('video_height', models.IntegerField(blank=True, editable=False, null=True)),
                ('embed_data_last_fetch_time', models.DateTimeField(blank=True, editable=False, null=True)),
                ('embed_data_last_error_time', models.DateTimeField(blank=True, editable=False, null=True)),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='productions.production')),
            ],
            options={
                'ordering': ['link_class'],
                'unique_together': {('link_class', 'parameter', 'production', 'is_download_link')},
                'indexes': [
                    models.Index(fields=['link_class', 'parameter'], name='productions_link_cl_a8fd1a_idx'),
                ],
            },
        ),
        migrations.RunPython(
            code=create_productiontypes,
        ),
        migrations.AlterField(
            model_name='productionlink',
            name='parameter',
            field=models.CharField(max_length=4096),
        ),
        migrations.AlterField(
            model_name='production',
            name='author_affiliation_nicks',
            field=models.ManyToManyField(blank=True, related_name='member_productions', to='demoscene.nick'),
        ),
        migrations.AddField(
            model_name='production',
            name='has_screenshot',
            field=models.BooleanField(default=False, editable=False, help_text=b'True if this prod has at least one (processed) screenshot'),
        ),
        migrations.RunSQL(
            sql='UPDATE productions_production SET has_screenshot = (default_screenshot_id IS NOT NULL)',
            reverse_sql='',
        ),
        migrations.RemoveField(
            model_name='production',
            name='default_screenshot',
        ),
        migrations.AddField(
            model_name='production',
            name='search_document',
            field=django.contrib.postgres.search.SearchVectorField(null=True),
        ),
        migrations.AddIndex(
            model_name='production',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_document'], name='productions_search__8683f0_gin'),
        ),
        migrations.AddField(
            model_name='production',
            name='search_title',
            field=models.CharField(blank=True, db_index=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='production',
            name='search_document',
            field=django.contrib.postgres.search.SearchVectorField(editable=False, null=True),
        ),
        migrations.AddField(
            model_name='productionlink',
            name='source',
            field=models.CharField(blank=True, editable=False, help_text='Identifier to indicate where this link came from - e.g. manual (entered via form), match, auto', max_length=32),
        ),
        migrations.CreateModel(
            name='InfoFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(blank=True, max_length=255)),
                ('filesize', models.IntegerField()),
                ('sha1', models.CharField(max_length=40)),
                ('encoding', models.CharField(blank=True, max_length=32, null=True)),
                ('file', models.FileField(blank=True, upload_to='nfo')),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='info_files', to='productions.production')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'info file',
                'verbose_name_plural': 'info files',
            },
        ),
        migrations.AddField(
            model_name='production',
            name='locked',
            field=models.BooleanField(default=False, editable=False),
        ),
        migrations.AddField(
            model_name='credit',
            name='data_source',
            field=models.CharField(blank=True, editable=False, max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='packmember',
            name='data_source',
            field=models.CharField(blank=True, editable=False, max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='soundtracklink',
            name='data_source',
            field=models.CharField(blank=True, editable=False, max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='screenshot',
            name='data_source',
            field=models.CharField(blank=True, editable=False, max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='screenshot',
            name='janeway_id',
            field=models.IntegerField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='screenshot',
            name='janeway_suffix',
            field=models.CharField(blank=True, editable=False, max_length=5, null=True),
        ),
        migrations.DeleteModel(
            name='Ansi',
        ),
        migrations.AlterField(
            model_name='credit',
            name='category',
            field=models.CharField(blank=True, choices=[('Code', 'Code'), ('Graphics', 'Graphics'), ('Music', 'Music'), ('Text', 'Text'), ('Other', 'Other')], max_length=20),
        ),
        migrations.AlterField(
            model_name='production',
            name='demozoo0_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='Demozoo v0 ID'),
        ),
        migrations.AlterField(
            model_name='production',
            name='has_bonafide_edits',
            field=models.BooleanField(default=True, help_text='True if this production has been updated through its own forms, as opposed to just compo results tables'),
        ),
        migrations.AlterField(
            model_name='production',
            name='has_screenshot',
            field=models.BooleanField(default=False, editable=False, help_text='True if this prod has at least one (processed) screenshot'),
        ),
        migrations.AlterField(
            model_name='production',
            name='include_notes_in_search',
            field=models.BooleanField(default=True, help_text="Whether the notes field for this production will be indexed. (Untick this to avoid false matches in search results e.g. 'this demo was not by Magic / Nah-Kolor')"),
        ),
        migrations.AlterField(
            model_name='production',
            name='release_date_precision',
            field=models.CharField(blank=True, choices=[('d', 'Day'), ('m', 'Month'), ('y', 'Year')], max_length=1),
        ),
        migrations.AlterField(
            model_name='production',
            name='scene_org_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='scene.org ID'),
        ),
        migrations.AlterField(
            model_name='production',
            name='supertype',
            field=models.CharField(choices=[('production', 'Production'), ('graphics', 'Graphics'), ('music', 'Music')], db_index=True, max_length=32),
        ),
        migrations.AlterField(
            model_name='productionblurb',
            name='body',
            field=models.TextField(help_text='A tweet-sized description of this demo, to promote it on listing pages'),
        ),
        migrations.AlterField(
            model_name='productionlink',
            name='demozoo0_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='Demozoo v0 ID'),
        ),
        migrations.AlterField(
            model_name='productionlink',
            name='file_for_screenshot',
            field=models.CharField(blank=True, help_text='The file within this archive which has been identified as most suitable for generating a screenshot from', max_length=255),
        ),
        migrations.AlterField(
            model_name='productionlink',
            name='has_bad_image',
            field=models.BooleanField(default=False, help_text='Indicates that an attempt to create a screenshot from this link has failed at the image processing stage'),
        ),
        migrations.AlterField(
            model_name='productionlink',
            name='is_unresolved_for_screenshotting',
            field=models.BooleanField(default=False, help_text="Indicates that we've tried and failed to identify the most suitable file in this archive to generate a screenshot from"),
        ),
        migrations.AlterField(
            model_name='productiontype',
            name='internal_name',
            field=models.CharField(blank=True, help_text='Used to identify this prod type for special treatment in code - leave this alone!', max_length=32),
        ),
        migrations.AlterField(
            model_name='productiontype',
            name='position',
            field=models.IntegerField(default=0, help_text='Position in which this should be ordered underneath its parent type (if not alphabetical)'),
        ),
        migrations.AlterField(
            model_name='soundtracklink',
            name='soundtrack',
            field=models.ForeignKey(limit_choices_to={'supertype': 'music'}, on_delete=django.db.models.deletion.CASCADE, related_name='appearances_as_soundtrack', to='productions.production'),
        ),
        migrations.AddField(
            model_name='production',
            name='hide_from_search_engines',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='EmulatorConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emulator', models.CharField(choices=[('jsspeccy', 'JSSpeccy')], max_length=30)),
                ('launch_url', models.URLField(max_length=4096)),
                ('configuration', models.TextField(blank=True)),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emulator_configs', to='productions.production')),
            ],
        ),
        migrations.AlterField(
            model_name='screenshot',
            name='thumbnail_url',
            field=models.CharField(blank=True, editable=False, max_length=255),
        ),
    ]
